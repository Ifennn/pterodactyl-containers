#!/bin/bash

###
# create-project - Creates initial project configuration
###


## VARIABLES

# Toggle Flags
missing_flags="yes"
panel_enabled="false"
daemon_enabled="false"
certbot_enabled="false"
exclude_database="false"
dev_build="false"

# Daemon Configuration
config_daemon_dir=""
config_docker_socket=""

# Functions

# Returns the help message
function _return_help {
	echo ""
	echo "Pterodactyl Docker Deployment Script"
	echo "Usage: $0 [options]"
	echo ""
	echo "Options:"
	echo ""
	echo " --help  , -h             - returns this screen"
    echo " --panel                  - Adds panel (*)"
    echo " --daemon                 - Adds daemon (*)"
    echo " --certbot                - Adds letsencrypt certbot"
    echo " --build                  - Enables build options"
    echo ""
    echo " --daemon-dir []          - Configures where the daemon sets its files and config (ex. /var/lib/pterodactyl)"
    echo " --docker-socket []       - Where the daemon contacts docker (ex. /var/run/docker.sock)"
    echo " --no-panel-db            - Do not deploy with provided database services."
    echo ""
    echo " (*) When building a custom docker-compose file, you must specify either the panel or daemon to build"
    echo ""
}

function build_config {
    >&2 echo "Building Configuration..."

    IFS=" "

    if [ -f docker-compose.yml ]; then
        rm -rf docker-compose.bak.yml
        mv docker-compose.yml docker-compose.bak.yml
    fi

    export panel_enabled daemon_enabled certbot_enabled exclude_database dev_build

    cd manifest/compose
    yq -n "eval(load_str(\"base.yq\"))" > ../../docker-compose.yml
    cd ../../

    # Build .env Configuration

    # Create .env file if it does not exist.
    if ! [ -f .env ]; then
        echo "## Project configuration file ##" > .env
        echo "# DO NOT TOUCH UNLESS YOU KNOW WHAT YOU ARE DOING!" >> .env
        echo "" >> .env
    fi

    if [ "$panel_enabled" == "true" ]; then
        if [ "$dev_build" == "true" ]; then
            if grep -q "PANEL_VERSION=" .env; then
                sed -i "s/PANEL_VERSION=.*/$(grep "PANEL_VERSION=" manifest/version.txt)/" .env
            else
                grep "PANEL_VERSION=" manifest/version.txt >> .env
            fi
        fi
    fi

    if [ "$daemon_enabled" == "true" ]; then
        if [ "$dev_build" == "true" ]; then
            if grep -q "DAEMON_VERSION=" .env; then
                sed -i "s/DAEMON_VERSION=.*/$(grep "DAEMON_VERSION=" manifest/version.txt)/" .env
            else
                grep "DAEMON_VERSION=" manifest/version.txt >> .env
            fi
        fi

        if [ ! $config_daemon_dir == "" ]; then
            if grep -q "DAEMON_DATA_DIRECTORY=" .env; then
                sed -i "s|DAEMON_DATA_DIRECTORY=.*|DAEMON_DATA_DIRECTORY=${config_daemon_dir}|" .env
            else
                echo "DAEMON_DATA_DIRECTORY=$config_daemon_dir" >> .env
            fi
        fi
    fi

    if [ ! $config_docker_socket == "" ]; then
        if grep -q "DOCKER_SOCKET=" .env; then
            sed -i "s|DOCKER_SOCKET=.*|DOCKER_SOCKET=$config_docker_socket|" .env
        else
            echo "DOCKER_SOCKET=$config_docker_socket" >> .env
        fi
    fi

    # Create conf.d/data directory
    echo "Creating \"conf.d\" Directory"

    # Make directory and populate it with base environment files
    mkdir -m 700 -p conf.d
    cp -rpnv ./manifest/config/env/* ./conf.d/

    # Builds Let's Encrypt Directory and config.
    if [ "$certbot_enabled" == "true" ]; then
        mkdir -p ./conf.d/letsencrypt
        rm -f ./conf.d/letsencrypt/cli.ini

        # Determines which method Let's Encrypt will use when deploying certificates.
        # This simplifies running the certbot command.
        if [ "$panel_enabled" == "true" ]; then
            cp ./manifest/config/letsencrypt/webroot.ini ./conf.d/letsencrypt/cli.ini
        else 
            cp ./manifest/config/letsencrypt/standalone.ini ./conf.d/letsencrypt/cli.ini
        fi
    fi

}

# Notify user if yq is missing from their system and prompt to download it.
function check_yq {
    if ! command -v yq &> /dev/null; then
        echo "Error! Command 'yq' is missing from your system. Please check to make sure it is installed before continuing."
        echo "Download the latest version yq v4.x at https://github.com/mikefarah/yq/releases/"
        echo ""
        exit
    fi
}

# Fixing some nonsense with function returning
IFS=

cd "$(dirname $0)/../"

# Split our arguements into seperate sections
_command=()
for ((i=1; i<=$#; i++)); do
    if [[ "${!i}" == -* ]]; then
        case ${!i} in
            --help | -h)
                _return_help
                exit
                ;;
            # Enable Services
            --daemon) # Enables wings
                daemon_enabled="true"
                missing_flags="no"
                ;;
            --panel) # Enables panel
                panel_enabled="true"
                missing_flags="no"
                ;;
            --certbot) # Enable Let's Encrypt
                certbot_enabled="true"
                ;;
            --build)
                dev_build="true"
                ;;
            # Modify Certain runtime options
            --daemon-dir)
                ((i++))
                config_daemon_dir="${!i}"
                ;;
            --docker-socket)
                ((i++))
                config_docker_socket="${!i}"
                ;;
        esac
    else
        _command+=("${!i}")
    fi
done

if [ $missing_flags == "yes" ]; then
    panel_enabled="true"
    daemon_enabled="true"
    certbot_enabled="true"
fi

if [ "$panel_enabled" = "" ] && [ "$daemon_enabled" = "" ]; then
    echo "Error! Missing --panel and or --daemon flag! You must specify at least one when building a custom compose file."
    exit
fi

check_yq
build_config
